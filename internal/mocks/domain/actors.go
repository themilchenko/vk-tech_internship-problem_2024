// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/actors.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/actors.go -destination=internal/mocks/domain/actors.go
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	reflect "reflect"

	gormModels "github.com/themilchenko/vk-tech_internship-problem_2024/internal/models/gorm"
	httpModels "github.com/themilchenko/vk-tech_internship-problem_2024/internal/models/http"
	gomock "go.uber.org/mock/gomock"
)

// MockActorsUsecase is a mock of ActorsUsecase interface.
type MockActorsUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockActorsUsecaseMockRecorder
}

// MockActorsUsecaseMockRecorder is the mock recorder for MockActorsUsecase.
type MockActorsUsecaseMockRecorder struct {
	mock *MockActorsUsecase
}

// NewMockActorsUsecase creates a new mock instance.
func NewMockActorsUsecase(ctrl *gomock.Controller) *MockActorsUsecase {
	mock := &MockActorsUsecase{ctrl: ctrl}
	mock.recorder = &MockActorsUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorsUsecase) EXPECT() *MockActorsUsecaseMockRecorder {
	return m.recorder
}

// CreateActor mocks base method.
func (m *MockActorsUsecase) CreateActor(actor httpModels.Actor) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActor", actor)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActor indicates an expected call of CreateActor.
func (mr *MockActorsUsecaseMockRecorder) CreateActor(actor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActor", reflect.TypeOf((*MockActorsUsecase)(nil).CreateActor), actor)
}

// DeleteActorByID mocks base method.
func (m *MockActorsUsecase) DeleteActorByID(actorID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActorByID", actorID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActorByID indicates an expected call of DeleteActorByID.
func (mr *MockActorsUsecaseMockRecorder) DeleteActorByID(actorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActorByID", reflect.TypeOf((*MockActorsUsecase)(nil).DeleteActorByID), actorID)
}

// GetActorByID mocks base method.
func (m *MockActorsUsecase) GetActorByID(actorID uint64) (httpModels.ActorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActorByID", actorID)
	ret0, _ := ret[0].(httpModels.ActorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActorByID indicates an expected call of GetActorByID.
func (mr *MockActorsUsecaseMockRecorder) GetActorByID(actorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorByID", reflect.TypeOf((*MockActorsUsecase)(nil).GetActorByID), actorID)
}

// GetActors mocks base method.
func (m *MockActorsUsecase) GetActors(pageNum uint64) ([]httpModels.GetActorsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActors", pageNum)
	ret0, _ := ret[0].([]httpModels.GetActorsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActors indicates an expected call of GetActors.
func (mr *MockActorsUsecaseMockRecorder) GetActors(pageNum any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActors", reflect.TypeOf((*MockActorsUsecase)(nil).GetActors), pageNum)
}

// UpdateActor mocks base method.
func (m *MockActorsUsecase) UpdateActor(actor httpModels.Actor, actorID uint64) (httpModels.ActorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActor", actor, actorID)
	ret0, _ := ret[0].(httpModels.ActorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateActor indicates an expected call of UpdateActor.
func (mr *MockActorsUsecaseMockRecorder) UpdateActor(actor, actorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActor", reflect.TypeOf((*MockActorsUsecase)(nil).UpdateActor), actor, actorID)
}

// MockActorsRepository is a mock of ActorsRepository interface.
type MockActorsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockActorsRepositoryMockRecorder
}

// MockActorsRepositoryMockRecorder is the mock recorder for MockActorsRepository.
type MockActorsRepositoryMockRecorder struct {
	mock *MockActorsRepository
}

// NewMockActorsRepository creates a new mock instance.
func NewMockActorsRepository(ctrl *gomock.Controller) *MockActorsRepository {
	mock := &MockActorsRepository{ctrl: ctrl}
	mock.recorder = &MockActorsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorsRepository) EXPECT() *MockActorsRepositoryMockRecorder {
	return m.recorder
}

// CreateActor mocks base method.
func (m *MockActorsRepository) CreateActor(actor gormModels.Actor) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActor", actor)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActor indicates an expected call of CreateActor.
func (mr *MockActorsRepositoryMockRecorder) CreateActor(actor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActor", reflect.TypeOf((*MockActorsRepository)(nil).CreateActor), actor)
}

// DeleteActorByID mocks base method.
func (m *MockActorsRepository) DeleteActorByID(actorID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActorByID", actorID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActorByID indicates an expected call of DeleteActorByID.
func (mr *MockActorsRepositoryMockRecorder) DeleteActorByID(actorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActorByID", reflect.TypeOf((*MockActorsRepository)(nil).DeleteActorByID), actorID)
}

// GetActorByID mocks base method.
func (m *MockActorsRepository) GetActorByID(actorID uint64) (gormModels.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActorByID", actorID)
	ret0, _ := ret[0].(gormModels.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActorByID indicates an expected call of GetActorByID.
func (mr *MockActorsRepositoryMockRecorder) GetActorByID(actorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorByID", reflect.TypeOf((*MockActorsRepository)(nil).GetActorByID), actorID)
}

// GetActors mocks base method.
func (m *MockActorsRepository) GetActors(pageNum uint64) ([]gormModels.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActors", pageNum)
	ret0, _ := ret[0].([]gormModels.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActors indicates an expected call of GetActors.
func (mr *MockActorsRepositoryMockRecorder) GetActors(pageNum any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActors", reflect.TypeOf((*MockActorsRepository)(nil).GetActors), pageNum)
}

// GetActorsFromMovie mocks base method.
func (m *MockActorsRepository) GetActorsFromMovie(movieID uint64) ([]gormModels.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActorsFromMovie", movieID)
	ret0, _ := ret[0].([]gormModels.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActorsFromMovie indicates an expected call of GetActorsFromMovie.
func (mr *MockActorsRepositoryMockRecorder) GetActorsFromMovie(movieID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActorsFromMovie", reflect.TypeOf((*MockActorsRepository)(nil).GetActorsFromMovie), movieID)
}

// UpdateActor mocks base method.
func (m *MockActorsRepository) UpdateActor(actor gormModels.Actor) (gormModels.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActor", actor)
	ret0, _ := ret[0].(gormModels.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateActor indicates an expected call of UpdateActor.
func (mr *MockActorsRepositoryMockRecorder) UpdateActor(actor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActor", reflect.TypeOf((*MockActorsRepository)(nil).UpdateActor), actor)
}
